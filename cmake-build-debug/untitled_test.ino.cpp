// automatically generated by arduino-cmake
#line 1 "D:/Google Drive/Disertation/arduino/untitled/test.ino"
#include <Arduino.h>
#include <stdlib.h>
#include <string.h>
#include <EnableInterrupt.h>
#include <NeoSWSerial.h>

// channel 2 is forward/reverse
// channel 1 is left/right

// serial initialisation
#define RX_PIN 10
#define TX_PIN 11
#line 16 "D:/Google Drive/Disertation/arduino/untitled/cmake-build-debug/untitled_test.ino.cpp"
#include "Arduino.h"

//=== START Forward: D:/Google Drive/Disertation/arduino/untitled/test.ino
 void serialISR() ;
 void serialISR() ;
 void rc_read_values() ;
 void rc_read_values() ;
 void calc_input(uint8_t channel, uint8_t input_pin) ;
 void calc_input(uint8_t channel, uint8_t input_pin) ;
 void calc_ch1() ;
 void calc_ch1() ;
 void calc_ch2() ;
 void calc_ch2() ;
 void setup() ;
 void setup() ;
 void loop() ;
 void loop() ;
//=== END Forward: D:/Google Drive/Disertation/arduino/untitled/test.ino
#line 11 "D:/Google Drive/Disertation/arduino/untitled/test.ino"


NeoSWSerial nSerial(RX_PIN, TX_PIN); // RX, TX

// rc variables
#define RC_CH1  0
#define RC_CH2  1

#define RC_NUM_CHANNELS 2

#define RC_CH1_INPUT  2
#define RC_CH2_INPUT  3

uint16_t rc_values[RC_NUM_CHANNELS];
uint32_t rc_start[RC_NUM_CHANNELS];
volatile uint16_t rc_shared[RC_NUM_CHANNELS];

int c;

void serialISR()
{
    NeoSWSerial::rxISR(*portInputRegister(digitalPinToPort(RX_PIN)));
}

void rc_read_values() {
    noInterrupts();
    memcpy(rc_values, (const void *)rc_shared, sizeof(rc_shared));
    interrupts();
}

void calc_input(uint8_t channel, uint8_t input_pin) {
    if (digitalRead(input_pin) == HIGH) {
        rc_start[channel] = micros();
    } else {
        uint16_t rc_compare = (uint16_t)(micros() - rc_start[channel]);
        rc_shared[channel] = rc_compare;
    }
}

void calc_ch1() { calc_input(RC_CH1, RC_CH1_INPUT); }
void calc_ch2() { calc_input(RC_CH2, RC_CH2_INPUT); }

//void append(char* s, char c) {
//    int len = strlen(s);
//    if (len <= 49) {
//        s[len] = c;
//        s[len + 1] = '\0';
//    }
//}

void setup() {
    enableInterrupt(RX_PIN, serialISR, CHANGE);

    nSerial.begin(9600);
    nSerial.print("connected\r\n");

//    Serial.begin(9600);
//    Serial.print("connected\r\n");

    pinMode(RC_CH1_INPUT, INPUT);
    pinMode(RC_CH2_INPUT, INPUT);

    enableInterrupt(RC_CH1_INPUT, calc_ch1, CHANGE);
    enableInterrupt(RC_CH2_INPUT, calc_ch2, CHANGE);
}

void loop() {
    if (nSerial.available() > 0) {
        while(nSerial.available() > 0) {
            c = nSerial.read();
        }
        rc_read_values();
        // direction
        nSerial.print(rc_values[RC_CH1]);
        nSerial.print("\r\n");
        // speed
        nSerial.print(rc_values[RC_CH2]);
        nSerial.print("\r\n");
    }
}